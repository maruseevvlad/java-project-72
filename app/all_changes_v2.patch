diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index ef7caf7..ed22e58 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -21,6 +21,7 @@ jobs:
         with:
           java-version: 17
           distribution: 'zulu'
+          cache: 'gradle'
 
       - name: Cache Gradle packages
         uses: actions/cache@v4
@@ -51,4 +52,5 @@ jobs:
       - name: SonarQube Analysis
         env:
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
+          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
         run: ./gradlew sonar --info
diff --git a/app/src/main/java/hexlet/code/App.java b/app/src/main/java/hexlet/code/App.java
index a5dd03a..c2d9aea 100644
--- a/app/src/main/java/hexlet/code/App.java
+++ b/app/src/main/java/hexlet/code/App.java
@@ -19,31 +19,36 @@ import java.util.Map;
 
 public class App {
 
-    private static final UrlRepository URL_REPOSITORY = new UrlRepository(DataSourceProvider.getDataSource());
-    private static final UrlCheckRepository CHECK_REPO = new UrlCheckRepository(DataSourceProvider.getDataSource());
+    // Репозитории теперь не статические, а инициализируются в методе getApp()
+    private UrlRepository urlRepository;
+    private UrlCheckRepository urlCheckRepository;
 
     private static TemplateEngine createTemplateEngine() {
         ResourceCodeResolver resolver = new ResourceCodeResolver("templates", App.class.getClassLoader());
         return TemplateEngine.create(resolver, ContentType.Html);
     }
 
-    public static Javalin getApp() {
-        DbInitializer.init();
+    public Javalin getApp() {
+        DataSourceProvider.init(); // Инициализация схемы БД
+
+        // Инициализация репозиториев после инициализации схемы БД
+        urlRepository = new UrlRepository(DataSourceProvider.getDataSource());
+        urlCheckRepository = new UrlCheckRepository(DataSourceProvider.getDataSource());
 
         return Javalin.create(config -> {
             config.bundledPlugins.enableDevLogging();
             config.fileRenderer(new JavalinJte(createTemplateEngine()));
         })
-                .get("/", App::renderUrls)
+                .get("/", ctx -> renderUrls(ctx))
                 .get("/urls", ctx -> ctx.redirect("/"))
                 .get("/urls/{id}", ctx -> {
                     long id = Long.parseLong(ctx.pathParam("id"));
-                    Url url = URL_REPOSITORY.findById(id);
+                    Url url = urlRepository.findById(id);
                     if (url == null) {
                         ctx.status(404).result("URL не найден");
                         return;
                     }
-                    List<UrlCheck> checks = CHECK_REPO.findAllByUrlId(id);
+                    List<UrlCheck> checks = urlCheckRepository.findAllByUrlId(id);
                     ctx.render("urls/show.jte", Map.of("url", url, "checks", checks));
                 })
                 .post("/urls", ctx -> {
@@ -55,7 +60,7 @@ public class App {
                                 ? parsedUrl.getProtocol() + "://" + parsedUrl.getHost()
                                 : parsedUrl.getProtocol() + "://" + parsedUrl.getHost() + ":" + parsedUrl.getPort();
 
-                        if (URL_REPOSITORY.existsByName(normalizedUrl)) {
+                        if (urlRepository.existsByName(normalizedUrl)) {
                             ctx.sessionAttribute("flash", "Страница уже существует");
                             ctx.redirect("/");
                             return;
@@ -63,7 +68,7 @@ public class App {
 
                         Url url = new Url();
                         url.setName(normalizedUrl);
-                        URL_REPOSITORY.save(url);
+                        urlRepository.save(url);
 
                         ctx.sessionAttribute("flash", "Страница успешно добавлена");
                     } catch (Exception e) {
@@ -73,7 +78,7 @@ public class App {
                 })
                 .post("/urls/{id}/checks", ctx -> {
                     long id = Long.parseLong(ctx.pathParam("id"));
-                    Url url = URL_REPOSITORY.findById(id);
+                    Url url = urlRepository.findById(id);
                     if (url == null) {
                         ctx.status(404).result("URL не найден");
                         return;
@@ -95,7 +100,7 @@ public class App {
                         check.setDescription(desc != null ? desc.attr("content") : null);
 
                         check.setCreatedAt(LocalDateTime.now());
-                        CHECK_REPO.save(check);
+                        urlCheckRepository.save(check);
 
                         ctx.sessionAttribute("flash", "Проверка выполнена!");
                     } catch (Exception e) {
@@ -106,18 +111,20 @@ public class App {
                 });
     }
 
-    private static void renderUrls(io.javalin.http.Context ctx) throws SQLException {
-        List<Url> urls = URL_REPOSITORY.findAll();
+    private void renderUrls(io.javalin.http.Context ctx) throws SQLException {
+        List<Url> urls = urlRepository.findAll();
         List<UrlDto> urlDtos = new ArrayList<>();
         for (Url url : urls) {
-            UrlCheck lastCheck = CHECK_REPO.findLastByUrlId(url.getId());
+            UrlCheck lastCheck = urlCheckRepository.findLastByUrlId(url.getId());
             urlDtos.add(new UrlDto(url, lastCheck));
         }
         ctx.render("index.jte", Map.of("urls", urlDtos));
     }
 
     public static void main(String[] args) {
-        Javalin app = getApp();
-        app.start(7070);
+        App app = new App(); // Создаем экземпляр App
+        Javalin javalinApp = app.getApp(); // Вызываем нестатический метод getApp()
+        javalinApp.start(7070);
     }
 }
+
diff --git a/app/src/main/java/hexlet/code/DataSourceProvider.java b/app/src/main/java/hexlet/code/DataSourceProvider.java
index 764db07..73644eb 100644
--- a/app/src/main/java/hexlet/code/DataSourceProvider.java
+++ b/app/src/main/java/hexlet/code/DataSourceProvider.java
@@ -4,16 +4,22 @@ import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 
 import javax.sql.DataSource;
+import java.io.IOException;
+import java.io.InputStream;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URLDecoder;
 import java.nio.charset.StandardCharsets;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Properties;
 
 public class DataSourceProvider {
 
     private static HikariDataSource dataSource;
 
-    public static DataSource getDataSource() {
+    public static synchronized DataSource getDataSource() {
         if (dataSource == null) {
             HikariConfig config = new HikariConfig();
 
@@ -77,9 +83,32 @@ public class DataSourceProvider {
         return dataSource;
     }
 
+    public static void init() {
+        try (Connection conn = getDataSource().getConnection()) {
+            InputStream is = DataSourceProvider.class.getClassLoader().getResourceAsStream("schema.sql");
+            if (is == null) {
+                System.out.println("schema.sql not found in resources");
+                return;
+            }
+            String sql = new String(is.readAllBytes(), StandardCharsets.UTF_8);
+            for (String stmt : sql.split(";")) {
+                String s = stmt.trim();
+                if (!s.isEmpty()) {
+                    try (Statement statement = conn.createStatement()) {
+                        statement.execute(s);
+                    }
+                }
+            }
+            System.out.println("DB schema initialized");
+        } catch (Exception e) {
+            throw new RuntimeException("Failed to initialize DB schema", e);
+        }
+    }
+
     public static void close() {
         if (dataSource != null) {
             dataSource.close();
         }
     }
 }
+
diff --git a/app/src/main/java/hexlet/code/DbInitializer.java b/app/src/main/java/hexlet/code/DbInitializer.java
deleted file mode 100644
index 7060a36..0000000
--- a/app/src/main/java/hexlet/code/DbInitializer.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package hexlet.code;
-
-import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
-import java.sql.Connection;
-import java.sql.Statement;
-
-public class DbInitializer {
-
-    public static void init() {
-        try (Connection conn = DataSourceProvider.getDataSource().getConnection()) {
-            InputStream is = DbInitializer.class.getClassLoader().getResourceAsStream("schema.sql");
-            if (is == null) {
-                System.out.println("schema.sql not found in resources");
-                return;
-            }
-            String sql = new String(is.readAllBytes(), StandardCharsets.UTF_8);
-
-            for (String stmt : sql.split(";")) {
-                String s = stmt.trim();
-                if (!s.isEmpty()) {
-                    try (Statement statement = conn.createStatement()) {
-                        statement.execute(s);
-                    }
-                }
-            }
-            System.out.println("DB schema initialized");
-        } catch (Exception e) {
-            throw new RuntimeException("Failed to initialize DB schema", e);
-        }
-    }
-}
diff --git a/app/src/main/java/hexlet/code/UrlRepository.java b/app/src/main/java/hexlet/code/UrlRepository.java
index 0ae16b8..89983c9 100644
--- a/app/src/main/java/hexlet/code/UrlRepository.java
+++ b/app/src/main/java/hexlet/code/UrlRepository.java
@@ -14,7 +14,7 @@ import java.util.List;
 public class UrlRepository extends BaseRepository {
 
     public UrlRepository() {
-        super(DataSourceProvider.getDataSource());
+        this(DataSourceProvider.getDataSource());
     }
 
     public UrlRepository(DataSource dataSource) {
diff --git a/app/src/main/resources/schema.sql b/app/src/main/resources/schema.sql
index ff0b43f..57dcc54 100644
--- a/app/src/main/resources/schema.sql
+++ b/app/src/main/resources/schema.sql
@@ -1,21 +1,19 @@
-DROP TABLE IF EXISTS urls, url_checks;
+DROP TABLE IF EXISTS url_checks;
+DROP TABLE IF EXISTS urls;
 
-CREATE TABLE IF NOT EXISTS urls (
-    id INT PRIMARY KEY AUTO_INCREMENT,
-    name VARCHAR(255) NOT NULL,
+CREATE TABLE urls (
+    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
+    name VARCHAR(255) NOT NULL UNIQUE,
     created_at TIMESTAMP
 );
 
 CREATE TABLE url_checks (
-    id SERIAL PRIMARY KEY,
-    url_id BIGINT NOT NULL,
+    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
+    url_id BIGINT NOT NULL REFERENCES urls(id),
     status_code INTEGER,
-    h1 TEXT,
-    title TEXT,
+    h1 VARCHAR(255),
+    title VARCHAR(255),
     description TEXT,
-    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
-    CONSTRAINT fk_url
-      FOREIGN KEY(url_id)
-      REFERENCES urls(id)
-      ON DELETE CASCADE
-);
\ No newline at end of file
+    created_at TIMESTAMP
+);
+
